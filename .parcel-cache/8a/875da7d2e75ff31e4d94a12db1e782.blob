var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "supportsAdoptingStyleSheets", function () {
  return supportsAdoptingStyleSheets;
});
_parcelHelpers.export(exports, "CSSResult", function () {
  return CSSResult;
});
_parcelHelpers.export(exports, "css", function () {
  return css;
});
const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype);
class CSSResult {
  constructor(cssText) {
    this.cssText = cssText;
  }
  /*Note, this is a getter so that it's lazy. In practice, this means*/
  /*stylesheets are not created until the first element instance is made.*/
  get styleSheet() {
    if (this._styleSheet === undefined) {
      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
      // is constructable.
      if (supportsAdoptingStyleSheets) {
        this._styleSheet = new CSSStyleSheet();
        this._styleSheet.replaceSync(this.cssText);
      } else {
        this._styleSheet = null;
      }
    }
    return this._styleSheet;
  }
}
const textFromCSSResult = value => {
  if (value instanceof CSSResult) {
    return value.cssText;
  } else {
    throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}.`);
  }
};
const css = (strings, ...values) => {
  const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
  return new CSSResult(cssText);
};
