var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "DefaultTemplateProcessor", function () {
  return DefaultTemplateProcessor;
});
_parcelHelpers.export(exports, "defaultTemplateProcessor", function () {
  return defaultTemplateProcessor;
});
var _partsJs = require('./parts.js');
class DefaultTemplateProcessor {
  /**
  * Create parts for an attribute-position binding, given the event, attribute
  * name, and string literals.
  *
  * @param element The element containing the binding
  * @param name  The attribute name
  * @param strings The string literals. There are always at least two strings,
  *   event for fully-controlled bindings with a single expression.
  */
  handleAttributeExpressions(element, name, strings, options) {
    const prefix = name[0];
    if (prefix === '.') {
      const committer = new _partsJs.PropertyCommitter(element, name.slice(1), strings);
      return committer.parts;
    }
    if (prefix === '@') {
      return [new _partsJs.EventPart(element, name.slice(1), options.eventContext)];
    }
    if (prefix === '?') {
      return [new _partsJs.BooleanAttributePart(element, name.slice(1), strings)];
    }
    const committer = new _partsJs.AttributeCommitter(element, name, strings);
    return committer.parts;
  }
  /**
  * Create parts for a text-position binding.
  * @param templateFactory
  */
  handleTextExpression(options) {
    return new _partsJs.NodePart(options);
  }
}
const defaultTemplateProcessor = new DefaultTemplateProcessor();
